services:
  # Message broker
  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=hccuser
      - RABBITMQ_DEFAULT_PASS=hccpass
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Traefik reverse proxy
  traefik:
    image: traefik:v2.11.0
    ports:
      - "80:80"   # HTTP
      - "443:443"  # HTTPS
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
      - ./traefik/acme.json:/etc/traefik/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.hcc-extractor.local`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=admin-auth"
      - "traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$xyq46b3j$$eZrWmU9MFrnZVdAKiP0T91"  # admin:password

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    volumes:
      - ./data:/gateway/data
      - ./output:/gateway/output
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/gateway/credentials.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/gateway/credentials.json
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_DEFAULT_USER=hccuser
      - RABBITMQ_DEFAULT_PASS=hccpass
      - RABBITMQ_USER=hccuser
      - RABBITMQ_PASSWORD=hccpass
      - RABBITMQ_VHOST=/
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hcc_extractor
      - INPUT_DIR=/gateway/data
      - OUTPUT_DIR=/gateway/output
      - HCC_CODES_PATH=/gateway/data/HCC_relevant_codes.csv
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Extractor Service
  extractor:
    build:
      context: ./services/extractor
      dockerfile: Dockerfile
    volumes:
      - ./data:/gateway/data  # Mount the data directory
      - ./output:/gateway/output  # Mount the output directory
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/gateway/credentials.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/gateway/credentials.json
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
      - RABBITMQ_HOST=rabbitmq
      - INPUT_DIR=/gateway/data
      - OUTPUT_DIR=/gateway/output
      - HCC_CODES_PATH=/gateway/data/HCC_relevant_codes.csv
      - USE_LANGGRAPH=1
    depends_on:
      - rabbitmq

  # Analyzer Service
  analyzer:
    build:
      context: ./services/analyzer
      dockerfile: Dockerfile
    volumes:
      - ./data:/gateway/data  # Mount the data directory
      - ./output:/gateway/output  # Mount the output directory
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/gateway/credentials.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/gateway/credentials.json
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
      - RABBITMQ_HOST=rabbitmq
      - INPUT_DIR=/gateway/data
      - OUTPUT_DIR=/gateway/output
      - HCC_CODES_PATH=/gateway/data/HCC_relevant_codes.csv
    depends_on:
      - rabbitmq
      - extractor

  # Validator Service
  validator:
    build:
      context: ./services/validator
      dockerfile: Dockerfile
    volumes:
      - ./data:/gateway/data  # Mount the data directory
      - ./output:/gateway/output  # Mount the output directory
    environment:
      - INPUT_DIR=/gateway/data
      - OUTPUT_DIR=/gateway/output
      - HCC_CODES_PATH=/gateway/data/HCC_relevant_codes.csv
    depends_on:
      - analyzer

  # Storage Watcher Service
  storage-watcher:
    build:
      context: ./services/storage-watcher
      dockerfile: Dockerfile
    volumes:
      - ./data:/gateway/data  # Mount the data directory
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/gateway/credentials.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/gateway/credentials.json
      - STORAGE_TYPE=local
      - WATCH_PATH=/gateway/data
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_DEFAULT_USER=hccuser
      - RABBITMQ_DEFAULT_PASS=hccpass
      - RABBITMQ_USER=hccuser
      - RABBITMQ_PASSWORD=hccpass
      - RABBITMQ_VHOST=/
      - RABBITMQ_QUEUE=document-events
      - WATCH_INTERVAL=10.0
      - FILE_PATTERNS=*.txt,*.pdf
    depends_on:
      - rabbitmq

  # Database
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hcc_extractor
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  rabbitmq_data:
  postgres_data: